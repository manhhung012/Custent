/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import com.formdev.flatlaf.FlatLightLaf;
import control.getData;
import control.loadDataTable;
import control.setData;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import object.customer;
import object.transaction;

/**
 *
 * @author Hung Pham
 */
public final class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public static SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
    public static Locale vi = new Locale("vi","VI");
    public static Date date = new Date();
    public static Calendar starDate = new GregorianCalendar(2021, 01, 04);
    public static DecimalFormat numberFormatCur = new DecimalFormat("###,###,###,###.##đ");
    public static List<transaction> listTransactionInHistory;
    public static List<transaction> listTransaction;
    public static int indexGetTransaction;
    public static String phoneOfCustomer;
    public static int id;
    public ImageIcon imgDate = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/date_icon.png")));
    public static Font font = new java.awt.Font("Tahoma", 1, 12);
    
    public MainFrame() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException, SQLException, ParseException {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setupTableTransaction(startDateTransactionDateChooser.getDate(),endDateTransactionDateChooser.getDate());
        setupTableCustomer(startDateCustomerDateChooser.getDate(),endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/icons8_pricing_48px.png")));
        addTransactionDialog.setLocationRelativeTo(null);
        addCustomerDialog.setLocationRelativeTo(null);
        updateTransactionDialog.setLocationRelativeTo(null);
        historyTransactionOfCustomerDialog.setLocationRelativeTo(null);
        rootTabbedPane.setIconAt(0, new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/icons8_paper_money_40px.png"))));
        rootTabbedPane.setIconAt(1, new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/icons8_customer_40px.png"))));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addTransactionDialog = new javax.swing.JDialog();
        addTransactionPanel = new javax.swing.JPanel();
        addTransactionInButton = new javax.swing.JButton();
        phoneInAddTransactionLabel = new javax.swing.JLabel();
        royalizeInaddTransactionLabel = new javax.swing.JLabel();
        priceInaddTransactionLabel = new javax.swing.JLabel();
        paidInaddTransactionLabel = new javax.swing.JLabel();
        phoneInaddTransactionText = new javax.swing.JTextField();
        priceInaddTransactionText = new javax.swing.JTextField();
        paidInaddTransactionText = new javax.swing.JTextField();
        unit2InTransactionLabel = new javax.swing.JLabel();
        unit1InTransactionLabel = new javax.swing.JLabel();
        royalizeInaddTransactionText = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addCustomerDialog = new javax.swing.JDialog();
        addCustomerPanel = new javax.swing.JPanel();
        addCustomerInButton = new javax.swing.JButton();
        phoneInAddCustomerLabel = new javax.swing.JLabel();
        nameInAddCustomerLabel = new javax.swing.JLabel();
        addressInAddCustomerLabel = new javax.swing.JLabel();
        phoneInAddCustomerText = new javax.swing.JTextField();
        nameInAddCustomerText = new javax.swing.JTextField();
        addressInAddCustomerText = new javax.swing.JTextField();
        updateTransactionDialog = new javax.swing.JDialog();
        updateTransactionPanel = new javax.swing.JPanel();
        updateTransactionInButton = new javax.swing.JButton();
        royalizeInUpdateTransactionLabel = new javax.swing.JLabel();
        priceInUpdateTransactionLabel = new javax.swing.JLabel();
        paidInUpdateTransactionLabel = new javax.swing.JLabel();
        royalizeInUpdateTransactionText = new javax.swing.JTextField();
        priceInUpdateTransactionText = new javax.swing.JTextField();
        paidInUpdateTransactionText = new javax.swing.JTextField();
        Unit1InUpdateTransactionLabel = new javax.swing.JLabel();
        unit2InUpdateTransactionLabel = new javax.swing.JLabel();
        historyTransactionOfCustomerDialog = new javax.swing.JDialog();
        controlHistoryTransactionPanel = new javax.swing.JPanel();
        updateTransactionButton = new javax.swing.JButton();
        totalInDebt = new javax.swing.JLabel();
        totalInDebtLabel = new javax.swing.JLabel();
        totalPaid = new javax.swing.JLabel();
        totalPaidLabel = new javax.swing.JLabel();
        totalPrice = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();
        totalPriceIcon = new javax.swing.JLabel();
        totalPaidIcon = new javax.swing.JLabel();
        totalInDebtIcon = new javax.swing.JLabel();
        dataHistoryTransactionPanel = new javax.swing.JPanel();
        historyTransactionScrollPane = new javax.swing.JScrollPane();
        historyTransactionTable = new javax.swing.JTable();
        rootPanel = new javax.swing.JPanel();
        rootTabbedPane = new javax.swing.JTabbedPane();
        transactionPanel = new javax.swing.JPanel();
        dataTransactionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        controlTransactionPanel = new javax.swing.JPanel();
        addTransactionButton = new javax.swing.JButton();
        viewTransactionButton = new javax.swing.JButton();
        resetTransactionButton = new javax.swing.JButton();
        startDateTransactionDateChooser = new com.toedter.calendar.JDateChooser();
        endDateTransactionDateChooser = new com.toedter.calendar.JDateChooser();
        totalRevenueLabel = new javax.swing.JLabel();
        totalRevenuel = new javax.swing.JLabel();
        totalPaymentLabel = new javax.swing.JLabel();
        totalPayment = new javax.swing.JLabel();
        startDateTransactionLabel = new javax.swing.JLabel();
        endDateTransactionLabel = new javax.swing.JLabel();
        updateTransactionInTransButton = new javax.swing.JButton();
        totalRevenuelIcon = new javax.swing.JLabel();
        totalPaymentIcon = new javax.swing.JLabel();
        customerPanel = new javax.swing.JPanel();
        dateCustomerPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        controlCustomerPanel = new javax.swing.JPanel();
        resetCustomerButton = new javax.swing.JButton();
        viewCustomerButton = new javax.swing.JButton();
        endDateCustomerDateChooser = new com.toedter.calendar.JDateChooser();
        startDateCustomerDateChooser = new com.toedter.calendar.JDateChooser();
        findCustomerText = new javax.swing.JTextField();
        findCustomerLabel = new javax.swing.JLabel();
        startDateLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        addTransactionForCustomerButton = new javax.swing.JButton();
        historyTransactionOfCustomerButton = new javax.swing.JButton();
        inDebtRadio = new javax.swing.JRadioButton();

        addTransactionDialog.setTitle("Thêm giao dịch");
        addTransactionDialog.setModal(true);
        addTransactionDialog.setSize(950, 200);
        addTransactionDialog.setResizable(false);

        addTransactionPanel.setBackground(new java.awt.Color(255, 255, 255));

        addTransactionInButton.setBackground(new java.awt.Color(52, 152, 219));
        addTransactionInButton.setFont(font); // NOI18N
        addTransactionInButton.setForeground(new java.awt.Color(255, 255, 255));
        addTransactionInButton.setText("Thêm");
        addTransactionInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransactionInButtonActionPerformed(evt);
            }
        });

        phoneInAddTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phoneInAddTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        phoneInAddTransactionLabel.setText("Số điện thoại:");

        royalizeInaddTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        royalizeInaddTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        royalizeInaddTransactionLabel.setText("Hàng hoá:");

        priceInaddTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        priceInaddTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        priceInaddTransactionLabel.setText("Thành tiền:");

        paidInaddTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paidInaddTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        paidInaddTransactionLabel.setText("Đã thanh toán:");

        phoneInaddTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phoneInaddTransactionText.setForeground(new java.awt.Color(51, 102, 0));
        phoneInaddTransactionText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        priceInaddTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        priceInaddTransactionText.setForeground(new java.awt.Color(51, 102, 0));
        priceInaddTransactionText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        priceInaddTransactionText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        paidInaddTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paidInaddTransactionText.setForeground(new java.awt.Color(51, 102, 0));
        paidInaddTransactionText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        unit2InTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unit2InTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        unit2InTransactionLabel.setText(".000đ");

        unit1InTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unit1InTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        unit1InTransactionLabel.setText(".000đ");

        royalizeInaddTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        royalizeInaddTransactionText.setForeground(new java.awt.Color(51, 102, 0));

        javax.swing.GroupLayout addTransactionPanelLayout = new javax.swing.GroupLayout(addTransactionPanel);
        addTransactionPanel.setLayout(addTransactionPanelLayout);
        addTransactionPanelLayout.setHorizontalGroup(
            addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTransactionPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phoneInAddTransactionLabel)
                    .addComponent(phoneInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addComponent(royalizeInaddTransactionLabel)
                        .addGap(254, 254, 254)
                        .addComponent(priceInaddTransactionLabel))
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addGap(604, 604, 604)
                        .addComponent(addTransactionInButton))
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addComponent(royalizeInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(priceInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unit1InTransactionLabel)
                        .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addTransactionPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(paidInaddTransactionLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(addTransactionPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(paidInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unit2InTransactionLabel)
                                .addContainerGap(20, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTransactionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        addTransactionPanelLayout.setVerticalGroup(
            addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTransactionPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(phoneInAddTransactionLabel)
                        .addComponent(royalizeInaddTransactionLabel)
                        .addComponent(priceInaddTransactionLabel))
                    .addComponent(paidInaddTransactionLabel))
                .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unit1InTransactionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(addTransactionInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phoneInaddTransactionText, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(royalizeInaddTransactionText)))
                    .addGroup(addTransactionPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(addTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paidInaddTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unit2InTransactionLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addTransactionDialog.getContentPane().add(addTransactionPanel, java.awt.BorderLayout.CENTER);

        addCustomerDialog.setSize(450, 350);
        addCustomerDialog.setTitle("Thêm khách hàng");
        addCustomerDialog.setModal(true);
        addCustomerDialog.setResizable(false);

        addCustomerPanel.setSize(450,350);
        addCustomerPanel.setBackground(new java.awt.Color(255, 255, 255));

        addCustomerInButton.setBackground(new java.awt.Color(52, 152, 219));
        addCustomerInButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addCustomerInButton.setForeground(new java.awt.Color(255, 255, 255));
        addCustomerInButton.setText("Thêm");
        addCustomerInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerInButtonActionPerformed(evt);
            }
        });

        phoneInAddCustomerLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phoneInAddCustomerLabel.setForeground(new java.awt.Color(51, 102, 0));
        phoneInAddCustomerLabel.setText("Số điện thoại:");

        nameInAddCustomerLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameInAddCustomerLabel.setForeground(new java.awt.Color(51, 102, 0));
        nameInAddCustomerLabel.setText("Tên Khách Hàng:");

        addressInAddCustomerLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addressInAddCustomerLabel.setForeground(new java.awt.Color(51, 102, 0));
        addressInAddCustomerLabel.setText("Địa chỉ");

        phoneInAddCustomerText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phoneInAddCustomerText.setForeground(new java.awt.Color(51, 102, 0));


        nameInAddCustomerText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameInAddCustomerText.setForeground(new java.awt.Color(51, 102, 0));

        addressInAddCustomerText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addressInAddCustomerText.setForeground(new java.awt.Color(51, 102, 0));

        javax.swing.GroupLayout addCustomerPanelLayout = new javax.swing.GroupLayout(addCustomerPanel);
        addCustomerPanel.setLayout(addCustomerPanelLayout);
        addCustomerPanelLayout.setHorizontalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addCustomerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addCustomerInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(phoneInAddCustomerText)
                        .addComponent(nameInAddCustomerText)
                        .addGroup(addCustomerPanelLayout.createSequentialGroup()
                            .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameInAddCustomerLabel)
                                .addComponent(addressInAddCustomerLabel)
                                .addComponent(phoneInAddCustomerLabel))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(addressInAddCustomerText)))
                .addGap(42, 42, 42))
        );
        addCustomerPanelLayout.setVerticalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(phoneInAddCustomerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(phoneInAddCustomerText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nameInAddCustomerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameInAddCustomerText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addressInAddCustomerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressInAddCustomerText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addCustomerInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        addCustomerDialog.getContentPane().add(addCustomerPanel, java.awt.BorderLayout.CENTER);

        updateTransactionDialog.setSize(700, 200);
        updateTransactionDialog.setTitle("Cập nhật giao dịch:");
        updateTransactionDialog.setModal(true);
        updateTransactionDialog.setResizable(false);

        updateTransactionPanel.setSize(700, 200);
        updateTransactionPanel.setBackground(new java.awt.Color(255, 255, 255));

        updateTransactionInButton.setBackground(new java.awt.Color(52, 152, 219));
        updateTransactionInButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateTransactionInButton.setForeground(new java.awt.Color(255, 255, 255));
        updateTransactionInButton.setText("Cập nhật");
        updateTransactionInButton.setFocusPainted(false);
        updateTransactionInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTransactionInButtonActionPerformed(evt);
            }
        });

        royalizeInUpdateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        royalizeInUpdateTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        royalizeInUpdateTransactionLabel.setText("Hàng Hoá:");

        priceInUpdateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        priceInUpdateTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        priceInUpdateTransactionLabel.setText("Thành Tiền:");

        paidInUpdateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paidInUpdateTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        paidInUpdateTransactionLabel.setText("Đã thanh toán:");

        royalizeInUpdateTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        royalizeInUpdateTransactionText.setForeground(new java.awt.Color(51, 102, 0));

        priceInUpdateTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        priceInUpdateTransactionText.setForeground(new java.awt.Color(51, 102, 0));
        priceInUpdateTransactionText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        paidInUpdateTransactionText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paidInUpdateTransactionText.setForeground(new java.awt.Color(51, 102, 0));
        paidInUpdateTransactionText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        Unit1InUpdateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Unit1InUpdateTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        Unit1InUpdateTransactionLabel.setText(".000đ");

        unit2InUpdateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unit2InUpdateTransactionLabel.setForeground(new java.awt.Color(51, 102, 0));
        unit2InUpdateTransactionLabel.setText(".000đ");

        javax.swing.GroupLayout updateTransactionPanelLayout = new javax.swing.GroupLayout(updateTransactionPanel);
        updateTransactionPanel.setLayout(updateTransactionPanelLayout);
        updateTransactionPanelLayout.setHorizontalGroup(
            updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateTransactionPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateTransactionInButton)
                    .addGroup(updateTransactionPanelLayout.createSequentialGroup()
                        .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(royalizeInUpdateTransactionLabel)
                            .addComponent(royalizeInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceInUpdateTransactionLabel)
                            .addGroup(updateTransactionPanelLayout.createSequentialGroup()
                                .addComponent(priceInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Unit1InUpdateTransactionLabel)))
                        .addGap(25, 25, 25)
                        .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paidInUpdateTransactionLabel)
                            .addGroup(updateTransactionPanelLayout.createSequentialGroup()
                                .addComponent(paidInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unit2InUpdateTransactionLabel)))))
                .addGap(12, 30, Short.MAX_VALUE))
        );
        updateTransactionPanelLayout.setVerticalGroup(
            updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateTransactionPanelLayout.createSequentialGroup()
                .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateTransactionPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(royalizeInUpdateTransactionLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateTransactionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paidInUpdateTransactionLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(priceInUpdateTransactionLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(royalizeInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paidInUpdateTransactionText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Unit1InUpdateTransactionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit2InUpdateTransactionLabel))
                .addGap(18, 18, 18)
                .addComponent(updateTransactionInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        updateTransactionDialog.getContentPane().add(updateTransactionPanel, java.awt.BorderLayout.CENTER);

        historyTransactionOfCustomerDialog.setSize(850, 550);
        historyTransactionOfCustomerDialog.setModal(true);
        historyTransactionOfCustomerDialog.setResizable(false);

        controlHistoryTransactionPanel.setBackground(new java.awt.Color(46, 204, 113));

        updateTransactionButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateTransactionButton.setForeground(new java.awt.Color(51, 102, 0));
        updateTransactionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_update_tag_20px.png"))); // NOI18N
        updateTransactionButton.setText("  Cập Nhật Giao Dịch");
        updateTransactionButton.setFocusPainted(false);
        updateTransactionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTransactionButtonActionPerformed(evt);
            }
        });

        totalInDebt.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        totalInDebt.setForeground(new java.awt.Color(255, 255, 255));
        totalInDebt.setText("sum");

        totalInDebtLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalInDebtLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalInDebtLabel.setText("Tổng nợ:");

        totalPaid.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        totalPaid.setForeground(new java.awt.Color(255, 255, 255));
        totalPaid.setText("sum");

        totalPaidLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalPaidLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalPaidLabel.setText("Đã thanh toán:");

        totalPrice.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        totalPrice.setForeground(new java.awt.Color(255, 255, 255));
        totalPrice.setText("sum");

        totalPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalPriceLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalPriceLabel.setText("Tổng mua:");

        totalPriceIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_coins_40px.png"))); // NOI18N

        totalPaidIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_paid_40px.png"))); // NOI18N

        totalInDebtIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_payment_history_40px_2.png"))); // NOI18N

        javax.swing.GroupLayout controlHistoryTransactionPanelLayout = new javax.swing.GroupLayout(controlHistoryTransactionPanel);
        controlHistoryTransactionPanel.setLayout(controlHistoryTransactionPanelLayout);
        controlHistoryTransactionPanelLayout.setHorizontalGroup(
            controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlHistoryTransactionPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(updateTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(totalPriceIcon)
                .addGap(10, 10, 10)
                .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(totalPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addComponent(totalPaidIcon)
                .addGap(10, 10, 10)
                .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalPaid, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(totalPaidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addComponent(totalInDebtIcon)
                .addGap(10, 10, 10)
                .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalInDebt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(totalInDebtLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        controlHistoryTransactionPanelLayout.setVerticalGroup(
            controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(updateTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                                .addComponent(totalPriceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(totalPriceIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                                .addComponent(totalPaidLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPaid))
                            .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(controlHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(controlHistoryTransactionPanelLayout.createSequentialGroup()
                                        .addComponent(totalInDebtLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalInDebt))
                                    .addComponent(totalInDebtIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(totalPaidIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        historyTransactionOfCustomerDialog.getContentPane().add(controlHistoryTransactionPanel, java.awt.BorderLayout.PAGE_START);

        historyTransactionTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent mouseEvent){
                JTable tb = (JTable) mouseEvent.getSource();
                if(mouseEvent.getClickCount() == 2 && tb.getSelectedRow() != -1){
                    updateTransactionInTransActionPerformed(listTransactionInHistory, historyTransactionTable);
                }
            }
        });

        historyTransactionTable.setFocusable(false);
        historyTransactionTable.setGridColor(new java.awt.Color(204, 204, 204));
        historyTransactionTable.setRowHeight(18);
        historyTransactionTable.setSelectionBackground(new java.awt.Color(0, 204, 153));
        historyTransactionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyTransactionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyTransactionTable.setShowGrid(true);
        historyTransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyTransactionTableMouseClicked(evt);
            }
        });
        historyTransactionTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                historyTransactionTableKeyPressed(evt);
            }
        });
        historyTransactionScrollPane.setViewportView(historyTransactionTable);

        javax.swing.GroupLayout dataHistoryTransactionPanelLayout = new javax.swing.GroupLayout(dataHistoryTransactionPanel);
        dataHistoryTransactionPanel.setLayout(dataHistoryTransactionPanelLayout);
        dataHistoryTransactionPanelLayout.setHorizontalGroup(
            dataHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataHistoryTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyTransactionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                .addContainerGap())
        );
        dataHistoryTransactionPanelLayout.setVerticalGroup(
            dataHistoryTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataHistoryTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyTransactionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        historyTransactionOfCustomerDialog.getContentPane().add(dataHistoryTransactionPanel, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Custent - Quản Lý Khách Hàng");
        setSize(new java.awt.Dimension(1366, 768));

        rootPanel.setLayout(new java.awt.BorderLayout());

        rootTabbedPane.setForeground(new java.awt.Color(51, 102, 0));
        rootTabbedPane.setFocusable(false);
        rootTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rootTabbedPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rootTabbedPaneKeyPressed(evt);
            }
        });

        transactionPanel.setLayout(new java.awt.BorderLayout());

        transactionTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table =(JTable) mouseEvent.getSource();
                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                    updateTransactionInTransActionPerformed(listTransaction, transactionTable);
                }
            }
        });
        transactionTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        transactionTable.setFocusable(false);
        transactionTable.setGridColor(new java.awt.Color(204, 204, 204));
        transactionTable.setRowHeight(18);
        transactionTable.setSelectionBackground(new java.awt.Color(0, 204, 153));
        transactionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transactionTable.setShowGrid(true);
        transactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transactionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(transactionTable);

        javax.swing.GroupLayout dataTransactionPanelLayout = new javax.swing.GroupLayout(dataTransactionPanel);
        dataTransactionPanel.setLayout(dataTransactionPanelLayout);
        dataTransactionPanelLayout.setHorizontalGroup(
            dataTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                .addContainerGap())
        );
        dataTransactionPanelLayout.setVerticalGroup(
            dataTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addContainerGap())
        );

        transactionPanel.add(dataTransactionPanel, java.awt.BorderLayout.CENTER);

        controlTransactionPanel.setBackground(new java.awt.Color(46, 204, 113));

        addTransactionButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addTransactionButton.setForeground(new java.awt.Color(51, 102, 0));
        addTransactionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_add_20px_1.png"))); // NOI18N
        addTransactionButton.setText("  Thêm Giao Dịch");
        addTransactionButton.setFocusPainted(false);
        addTransactionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addTransactionButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        addTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransactionButtonActionPerformed(evt);
            }
        });

        viewTransactionButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        viewTransactionButton.setForeground(new java.awt.Color(51, 102, 0));
        viewTransactionButton.setText("Xem");
        viewTransactionButton.setFocusPainted(false);
        viewTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTransactionButtonActionPerformed(evt);
            }
        });

        resetTransactionButton.setBackground(new java.awt.Color(255, 0, 0));
        resetTransactionButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resetTransactionButton.setForeground(new java.awt.Color(255, 255, 255));
        resetTransactionButton.setText("Reset");
        resetTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTransactionButtonActionPerformed(evt);
            }
        });

        startDateTransactionDateChooser.setIcon(imgDate);
        startDateTransactionDateChooser.setFocusable(false);
        startDateTransactionDateChooser.setOpaque(false);
        startDateTransactionDateChooser.setLocale(vi);
        startDateTransactionDateChooser.setDate(date);

        endDateTransactionDateChooser.setIcon(imgDate);
        endDateTransactionDateChooser.setOpaque(false);
        endDateTransactionDateChooser.setLocale(vi);
        endDateTransactionDateChooser.setDate(date);

        totalRevenueLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalRevenueLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalRevenueLabel.setText("Tổng Bán:");

        totalRevenuel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalRevenuel.setForeground(new java.awt.Color(255, 255, 255));
        totalRevenuel.setText("sum");

        totalPaymentLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalPaymentLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalPaymentLabel.setText("Tổng Thu:");

        totalPayment.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalPayment.setForeground(new java.awt.Color(255, 255, 255));
        totalPayment.setText("sum");

        startDateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        startDateTransactionLabel.setForeground(new java.awt.Color(255, 255, 255));
        startDateTransactionLabel.setText("Từ:");

        endDateTransactionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        endDateTransactionLabel.setForeground(new java.awt.Color(255, 255, 255));
        endDateTransactionLabel.setText("Đến:");

        updateTransactionInTransButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateTransactionInTransButton.setForeground(new java.awt.Color(51, 102, 0));
        updateTransactionInTransButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_update_tag_20px.png"))); // NOI18N
        updateTransactionInTransButton.setText("  Cập Nhật Giao Dịch");
        updateTransactionInTransButton.setFocusPainted(false);
        updateTransactionInTransButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updateTransactionInTransButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        updateTransactionInTransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTransactionInTransButtonActionPerformed(evt);
            }
        });

        totalRevenuelIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_coins_40px.png"))); // NOI18N

        totalPaymentIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_paid_40px.png"))); // NOI18N

        javax.swing.GroupLayout controlTransactionPanelLayout = new javax.swing.GroupLayout(controlTransactionPanel);
        controlTransactionPanel.setLayout(controlTransactionPanelLayout);
        controlTransactionPanelLayout.setHorizontalGroup(
            controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateTransactionInTransButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(69, 69, 69)
                .addComponent(totalRevenuelIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalRevenueLabel)
                    .addComponent(totalRevenuel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalPaymentIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalPaymentLabel)
                    .addComponent(totalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                        .addComponent(startDateTransactionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startDateTransactionDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                        .addComponent(endDateTransactionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endDateTransactionDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        controlTransactionPanelLayout.setVerticalGroup(
            controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                        .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                                .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(resetTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                    .addComponent(startDateTransactionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(startDateTransactionDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(totalRevenueLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endDateTransactionDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(updateTransactionInTransButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(endDateTransactionLabel))))
                    .addGroup(controlTransactionPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(controlTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controlTransactionPanelLayout.createSequentialGroup()
                                .addComponent(totalPaymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(totalRevenuel)
                            .addComponent(totalPaymentIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalRevenuelIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 23, Short.MAX_VALUE)))
                .addContainerGap())
        );

        transactionPanel.add(controlTransactionPanel, java.awt.BorderLayout.PAGE_START);

        rootTabbedPane.addTab("        Giao Dịch          ", transactionPanel);

        customerPanel.setLayout(new java.awt.BorderLayout());

        dateCustomerPanel.setForeground(new java.awt.Color(255, 255, 255));

        customerTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent mouseEvent){
                JTable table = (JTable)mouseEvent.getSource();
                if(mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1){
                    historyTransactionOfCustomerActionPerformed();
                }
            }
        });
        customerTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        customerTable.setFocusable(false);
        customerTable.setGridColor(new java.awt.Color(204, 204, 204));
        customerTable.setRowHeight(18);
        customerTable.setSelectionBackground(new java.awt.Color(0, 204, 153));
        customerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        customerTable.setShowGrid(true);
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(customerTable);

        javax.swing.GroupLayout dateCustomerPanelLayout = new javax.swing.GroupLayout(dateCustomerPanel);
        dateCustomerPanel.setLayout(dateCustomerPanelLayout);
        dateCustomerPanelLayout.setHorizontalGroup(
            dateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                .addContainerGap())
        );
        dateCustomerPanelLayout.setVerticalGroup(
            dateCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addContainerGap())
        );

        customerPanel.add(dateCustomerPanel, java.awt.BorderLayout.CENTER);

        controlCustomerPanel.setBackground(new java.awt.Color(46, 204, 113));

        resetCustomerButton.setBackground(new java.awt.Color(255, 0, 0));
        resetCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resetCustomerButton.setForeground(new java.awt.Color(255, 255, 255));
        resetCustomerButton.setText("Reset");
        resetCustomerButton.setFocusPainted(false);
        resetCustomerButton.setFocusable(false);
        resetCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCustomerButtonActionPerformed(evt);
            }
        });

        viewCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        viewCustomerButton.setForeground(new java.awt.Color(51, 102, 0));
        viewCustomerButton.setText("Xem");
        viewCustomerButton.setFocusPainted(false);
        viewCustomerButton.setFocusable(false);
        viewCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerButtonActionPerformed(evt);
            }
        });

        endDateCustomerDateChooser.setIcon(imgDate);
        endDateCustomerDateChooser.setFocusable(false);
        endDateCustomerDateChooser.setLocale(vi);
        endDateCustomerDateChooser.setDate(date);

        startDateCustomerDateChooser.setIcon(imgDate);
        startDateCustomerDateChooser.setFocusable(false);
        startDateCustomerDateChooser.setLocale(vi);
        startDateCustomerDateChooser.setDate(starDate.getTime());

        findCustomerText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findCustomerText.setForeground(new java.awt.Color(51, 102, 0));
        findCustomerText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findCustomerTextKeyPressed(evt);
            }
        });

        findCustomerLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        findCustomerLabel.setForeground(new java.awt.Color(255, 255, 255));
        findCustomerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_search_30px.png"))); // NOI18N
        findCustomerLabel.setFocusable(false);

        startDateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        startDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        startDateLabel.setText("Từ:");

        endDateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        endDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        endDateLabel.setText("Đến:");

        addTransactionForCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addTransactionForCustomerButton.setForeground(new java.awt.Color(51, 102, 0));
        addTransactionForCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_add_20px_1.png"))); // NOI18N
        addTransactionForCustomerButton.setText("  Thêm Giao Dịch");
        addTransactionForCustomerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addTransactionForCustomerButton.setFocusPainted(false);
        addTransactionForCustomerButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addTransactionForCustomerButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        addTransactionForCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransactionForCustomerButtonActionPerformed(evt);
            }
        });

        historyTransactionOfCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        historyTransactionOfCustomerButton.setForeground(new java.awt.Color(51, 102, 0));
        historyTransactionOfCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_order_history_20px.png"))); // NOI18N
        historyTransactionOfCustomerButton.setText("  Lịch Sử Mua Hàng");
        historyTransactionOfCustomerButton.setFocusPainted(false);
        historyTransactionOfCustomerButton.setFocusable(false);
        historyTransactionOfCustomerButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        historyTransactionOfCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyTransactionOfCustomerButtonActionPerformed(evt);
            }
        });

        inDebtRadio.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        inDebtRadio.setForeground(new java.awt.Color(255, 255, 255));
        inDebtRadio.setText("Còn nợ");
        inDebtRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDebtRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlCustomerPanelLayout = new javax.swing.GroupLayout(controlCustomerPanel);
        controlCustomerPanel.setLayout(controlCustomerPanelLayout);
        controlCustomerPanelLayout.setHorizontalGroup(
            controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addTransactionForCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historyTransactionOfCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 261, Short.MAX_VALUE)
                .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                        .addComponent(startDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startDateCustomerDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                        .addComponent(inDebtRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(findCustomerText, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findCustomerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endDateCustomerDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetCustomerButton))
                .addContainerGap())
        );
        controlCustomerPanelLayout.setVerticalGroup(
            controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                        .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(startDateCustomerDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(controlCustomerPanelLayout.createSequentialGroup()
                                .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addTransactionForCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                    .addComponent(resetCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endDateCustomerDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(historyTransactionOfCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(findCustomerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(findCustomerText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inDebtRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        customerPanel.add(controlCustomerPanel, java.awt.BorderLayout.PAGE_START);

        rootTabbedPane.addTab("        Khách Hàng          ", customerPanel);

        rootPanel.add(rootTabbedPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCustomerButtonActionPerformed
        try {
            setupTableCustomer(starDate.getTime(),date,inDebtRadio.isSelected());
            startDateCustomerDateChooser.setDate(starDate.getTime());
            endDateCustomerDateChooser.setDate(date);
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetCustomerButtonActionPerformed

    private void addTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransactionButtonActionPerformed
        phoneInaddTransactionText.setText("");
        royalizeInaddTransactionText.setText("");
        priceInaddTransactionText.setText("");
        paidInaddTransactionText.setText("");
        addTransactionDialog.setVisible(true);
    }//GEN-LAST:event_addTransactionButtonActionPerformed

    private void historyTransactionOfCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyTransactionOfCustomerButtonActionPerformed
        historyTransactionOfCustomerActionPerformed();
    }//GEN-LAST:event_historyTransactionOfCustomerButtonActionPerformed
    
    public void historyTransactionOfCustomerActionPerformed(){
        int index = customerTable.getSelectedRow();
        phoneOfCustomer = customerTable.getModel().getValueAt(index, 1).toString();
        historyTransactionOfCustomerDialog.setTitle(
            "Lịch sử giao dịch:    "+customerTable.getModel().getValueAt(index, 2) +" - " + customerTable.getModel().getValueAt(index, 1)+" - " + customerTable.getModel().getValueAt(index, 3)
        );
        try {
            setupTableHistoryTransaction(phoneOfCustomer, startDateCustomerDateChooser.getDate(), endDateCustomerDateChooser.getDate());
            updateTransactionButton.setEnabled(false);
            historyTransactionOfCustomerDialog.setVisible(true);
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void findCustomerTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findCustomerTextKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            try {
                loadDataTable.loadDataCustomer(getData.findCustomer(findCustomerText.getText(), getData.getCustomer(format.format(startDateCustomerDateChooser.getDate()),format.format(endDateCustomerDateChooser.getDate()))), customerTable);
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            historyTransactionOfCustomerButton.setEnabled(false);
            addTransactionForCustomerButton.setEnabled(false);
            }
    }//GEN-LAST:event_findCustomerTextKeyPressed

    private void viewCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCustomerButtonActionPerformed
        try {
            setupTableCustomer(startDateCustomerDateChooser.getDate(),endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewCustomerButtonActionPerformed

    private void viewTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTransactionButtonActionPerformed
        try {
            setupTableTransaction(startDateTransactionDateChooser.getDate(), endDateTransactionDateChooser.getDate());
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewTransactionButtonActionPerformed

    private void resetTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTransactionButtonActionPerformed
        try {
            setupTableTransaction(date, date);
            startDateTransactionDateChooser.setDate(date);
            endDateTransactionDateChooser.setDate(date);
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetTransactionButtonActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked
       addTransactionForCustomerButton.setEnabled(true);
       historyTransactionOfCustomerButton.setEnabled(true);
    }//GEN-LAST:event_customerTableMouseClicked

    private void addTransactionInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransactionInButtonActionPerformed
        try {
            int priceInt = Integer.parseInt(priceInaddTransactionText.getText());
            int paidInt = Integer.parseInt(paidInaddTransactionText.getText());
            String PhoneString =  phoneInaddTransactionText.getText();
            String royalizeString = royalizeInaddTransactionText.getText();
            System.out.println(PhoneString);
            if(getData.checkPhoneDuplicate(PhoneString)){
                if(paidInt<=priceInt){
                    transaction trans = creatingTransaction(PhoneString,royalizeString,priceInt, paidInt);
                    int conf = setData.insertTransaction(trans);
                    if(conf==0){
                        JOptionPane.showMessageDialog(null, "Lỗi, vui lòng kiểm tra lại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        addTransactionDialog.setVisible(false);
                        setupTableTransaction(startDateTransactionDateChooser.getDate(), endDateTransactionDateChooser.getDate());
                        setupTableCustomer(startDateCustomerDateChooser.getDate(),endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
                    }
                }else {
                    JOptionPane.showMessageDialog(null, "Số tiền đã thanh toán không thể lớn hơn thành tiền!", "Lỗi", JOptionPane.WARNING_MESSAGE);
                }
            }
            else if (!PhoneString.equals("")) {
                JOptionPane.showMessageDialog(null, "Lần đầu khách mua hàng. Vui lòng thêm thông tin!", "Lần đầu mua hàng", JOptionPane.WARNING_MESSAGE);
                phoneInAddCustomerText.setText(phoneInaddTransactionText.getText());
                nameInAddCustomerText.setText("");
                addressInAddCustomerText.setText("");
                addCustomerDialog.setVisible(true);
            }
            else {
                JOptionPane.showMessageDialog(null, "Số điện thoại không thể để trống", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException | ParseException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Lỗi kiểu dữ liệu nhập vào, vui lòng kiểm tra lại!", "Lỗi!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addTransactionInButtonActionPerformed

    private void addCustomerInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerInButtonActionPerformed
        try {
            customer cus = creatingCustomer(phoneInAddCustomerText.getText(), nameInAddCustomerText.getText(), addressInAddCustomerText.getText());
            int conf = setData.insertCustomer(cus);
            if(conf==0){
                JOptionPane.showConfirmDialog(null, "Lỗi. Vui lòng kiểm tra lại", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
            else {
                setupTableCustomer(startDateCustomerDateChooser.getDate(),endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
                addCustomerDialog.setVisible(false);
            }
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addCustomerInButtonActionPerformed

    private void addTransactionForCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransactionForCustomerButtonActionPerformed
        int index = customerTable.getSelectedRow();
        String phone = customerTable.getModel().getValueAt(index, 1).toString();
        phoneInaddTransactionText.setText(phone);
        royalizeInaddTransactionText.setText("");
        priceInaddTransactionText.setText("");
        paidInaddTransactionText.setText("");
        addTransactionDialog.setVisible(true);
    }//GEN-LAST:event_addTransactionForCustomerButtonActionPerformed

    private void updateTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTransactionButtonActionPerformed
        updateTransactionInTransActionPerformed(listTransactionInHistory, historyTransactionTable);
    }//GEN-LAST:event_updateTransactionButtonActionPerformed

    private void updateTransactionInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTransactionInButtonActionPerformed
        if(Integer.parseInt(paidInUpdateTransactionText.getText())>Integer.parseInt(priceInUpdateTransactionText.getText())){
            JOptionPane.showMessageDialog(null, "Số tiền đã thanh toán không thể lớn hơn thành tiền!", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }else {
            transaction trans = new transaction();
            trans.setRoyalize(royalizeInUpdateTransactionText.getText());
            trans.setPrice(Integer.parseInt(priceInUpdateTransactionText.getText())*1000);
            trans.setPaid(Integer.parseInt(paidInUpdateTransactionText.getText())*1000);
            trans.setId(id);
            

            try {
                int conf = setData.updateTransaction(trans);
                if(conf == 0) JOptionPane.showMessageDialog(null, "Lỗi. Vui kiểm tra lại!!!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                else {
                    setupTableCustomer(startDateCustomerDateChooser.getDate(), endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
                    setupTableHistoryTransaction(phoneOfCustomer, startDateCustomerDateChooser.getDate(), endDateCustomerDateChooser.getDate());
                    setupTableTransaction(startDateTransactionDateChooser.getDate(), endDateTransactionDateChooser.getDate());
                    updateTransactionButton.setEnabled(false);
                    updateTransactionDialog.setVisible(false);
                }
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateTransactionInButtonActionPerformed

    private void historyTransactionTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_historyTransactionTableKeyPressed

    }//GEN-LAST:event_historyTransactionTableKeyPressed

    private void historyTransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyTransactionTableMouseClicked
        updateTransactionButton.setEnabled(true);
    }//GEN-LAST:event_historyTransactionTableMouseClicked

    private void transactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transactionTableMouseClicked
        updateTransactionInTransButton.setEnabled(true);
    }//GEN-LAST:event_transactionTableMouseClicked

    private void updateTransactionInTransButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTransactionInTransButtonActionPerformed
        updateTransactionInTransActionPerformed(listTransaction, transactionTable);
    }//GEN-LAST:event_updateTransactionInTransButtonActionPerformed

    public void updateTransactionInTransActionPerformed(List<transaction> list, JTable tb){
        indexGetTransaction = tb.getSelectedRow();
        royalizeInUpdateTransactionText.setText(list.get(indexGetTransaction).getRoyalize());
        priceInUpdateTransactionText.setText(String.valueOf(list.get(indexGetTransaction).getPrice()/1000));
        paidInUpdateTransactionText.setText(String.valueOf(list.get(indexGetTransaction).getPaid()/1000));
        id = list.get(indexGetTransaction).getId();
        updateTransactionDialog.setVisible(true);
    }
    
    private void rootTabbedPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rootTabbedPaneKeyPressed
    }//GEN-LAST:event_rootTabbedPaneKeyPressed


    private void inDebtRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inDebtRadioActionPerformed
        try {
            setupTableCustomer(startDateCustomerDateChooser.getDate(),endDateCustomerDateChooser.getDate(),inDebtRadio.isSelected());
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inDebtRadioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainFrame().setVisible(true);
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException | SQLException | ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
    
    public transaction creatingTransaction(String phone, String royalize, int price, int paid) throws SQLException{
        transaction trans = new transaction();
        trans.setPhone(phone);
        trans.setRoyalize(royalize);
        trans.setPrice(price*1000);
        trans.setPaid(paid*1000);
        trans.setDate(date);
        trans.setId(getData.getCountTransaction()+1);
        return trans;
    }
    
    public customer creatingCustomer(String phone, String name, String address) throws SQLException{
        customer cus = new customer();
        cus.setPhone(phone);
        cus.setName(name);
        cus.setAddress(address);

        return cus;
    }
    
    public void setupTableTransaction(Date startDate, Date endDate) throws SQLException, ParseException{
        String startDateStr = format.format(startDate);
        String endDateStr = format.format(endDate);
        listTransaction = getData.getTransaction(startDateStr, endDateStr);
        loadDataTable.loadDataTransaction(listTransaction, transactionTable);
        totalRevenuel.setText(numberFormatCur.format(getData.getTotalRevenue(startDateStr, endDateStr)));
        totalPayment.setText(numberFormatCur.format(getData.getTotalPaid(startDateStr, endDateStr)));
        updateTransactionInTransButton.setEnabled(false);
    }

    public void setupTableCustomer(Date startDate, Date endDate, boolean inDebt) throws SQLException, ParseException{
        String startDateStr = format.format(startDate);
        String endDateStr = format.format(endDate);
        List<customer> lisCustomer = getData.getCustomer(startDateStr, endDateStr);
        if(inDebt){
            for (int i = 0; i <lisCustomer.size(); i++) {
                if(lisCustomer.get(i).getInDebt()==0){
                    lisCustomer.remove(i);
                    i--;
                }
            }
        }
        loadDataTable.loadDataCustomer(lisCustomer, customerTable);
        historyTransactionOfCustomerButton.setEnabled(false);
        addTransactionForCustomerButton.setEnabled(false);
    }
    
    public void setupTableHistoryTransaction(String phone, Date startDate, Date endDatte) throws SQLException, ParseException{
        listTransactionInHistory = getData.getHistoryTransaction(phone, format.format(startDate), format.format(endDatte));
        loadDataTable.loadDataTransactionOfCustomer(listTransactionInHistory, historyTransactionTable);
        totalPrice.setText(numberFormatCur.format(getData.getTotalPrice(listTransactionInHistory)));
        totalPaid.setText(numberFormatCur.format(getData.getTotalPaid(listTransactionInHistory)));
        totalInDebt.setText(numberFormatCur.format(getData.getTotalIndebt(listTransactionInHistory)));
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Unit1InUpdateTransactionLabel;
    private javax.swing.JDialog addCustomerDialog;
    private javax.swing.JButton addCustomerInButton;
    private javax.swing.JPanel addCustomerPanel;
    private javax.swing.JButton addTransactionButton;
    private javax.swing.JDialog addTransactionDialog;
    private javax.swing.JButton addTransactionForCustomerButton;
    private javax.swing.JButton addTransactionInButton;
    private javax.swing.JPanel addTransactionPanel;
    private javax.swing.JLabel addressInAddCustomerLabel;
    private javax.swing.JTextField addressInAddCustomerText;
    private javax.swing.JPanel controlCustomerPanel;
    private javax.swing.JPanel controlHistoryTransactionPanel;
    private javax.swing.JPanel controlTransactionPanel;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JTable customerTable;
    private javax.swing.JPanel dataHistoryTransactionPanel;
    private javax.swing.JPanel dataTransactionPanel;
    private javax.swing.JPanel dateCustomerPanel;
    private com.toedter.calendar.JDateChooser endDateCustomerDateChooser;
    private javax.swing.JLabel endDateLabel;
    private com.toedter.calendar.JDateChooser endDateTransactionDateChooser;
    private javax.swing.JLabel endDateTransactionLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel findCustomerLabel;
    private javax.swing.JTextField findCustomerText;
    private javax.swing.JButton historyTransactionOfCustomerButton;
    private javax.swing.JDialog historyTransactionOfCustomerDialog;
    private javax.swing.JScrollPane historyTransactionScrollPane;
    private javax.swing.JTable historyTransactionTable;
    private javax.swing.JRadioButton inDebtRadio;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameInAddCustomerLabel;
    private javax.swing.JTextField nameInAddCustomerText;
    private javax.swing.JLabel paidInUpdateTransactionLabel;
    private javax.swing.JTextField paidInUpdateTransactionText;
    private javax.swing.JLabel paidInaddTransactionLabel;
    private javax.swing.JTextField paidInaddTransactionText;
    private javax.swing.JLabel phoneInAddCustomerLabel;
    private javax.swing.JTextField phoneInAddCustomerText;
    private javax.swing.JLabel phoneInAddTransactionLabel;
    private javax.swing.JTextField phoneInaddTransactionText;
    private javax.swing.JLabel priceInUpdateTransactionLabel;
    private javax.swing.JTextField priceInUpdateTransactionText;
    private javax.swing.JLabel priceInaddTransactionLabel;
    private javax.swing.JTextField priceInaddTransactionText;
    private javax.swing.JButton resetCustomerButton;
    private javax.swing.JButton resetTransactionButton;
    private javax.swing.JPanel rootPanel;
    private javax.swing.JTabbedPane rootTabbedPane;
    private javax.swing.JLabel royalizeInUpdateTransactionLabel;
    private javax.swing.JTextField royalizeInUpdateTransactionText;
    private javax.swing.JLabel royalizeInaddTransactionLabel;
    private javax.swing.JTextField royalizeInaddTransactionText;
    private com.toedter.calendar.JDateChooser startDateCustomerDateChooser;
    private javax.swing.JLabel startDateLabel;
    private com.toedter.calendar.JDateChooser startDateTransactionDateChooser;
    private javax.swing.JLabel startDateTransactionLabel;
    private javax.swing.JLabel totalInDebt;
    private javax.swing.JLabel totalInDebtIcon;
    private javax.swing.JLabel totalInDebtLabel;
    private javax.swing.JLabel totalPaid;
    private javax.swing.JLabel totalPaidIcon;
    private javax.swing.JLabel totalPaidLabel;
    private javax.swing.JLabel totalPayment;
    private javax.swing.JLabel totalPaymentIcon;
    private javax.swing.JLabel totalPaymentLabel;
    private javax.swing.JLabel totalPrice;
    private javax.swing.JLabel totalPriceIcon;
    private javax.swing.JLabel totalPriceLabel;
    private javax.swing.JLabel totalRevenueLabel;
    private javax.swing.JLabel totalRevenuel;
    private javax.swing.JLabel totalRevenuelIcon;
    private javax.swing.JPanel transactionPanel;
    private javax.swing.JTable transactionTable;
    private javax.swing.JLabel unit1InTransactionLabel;
    private javax.swing.JLabel unit2InTransactionLabel;
    private javax.swing.JLabel unit2InUpdateTransactionLabel;
    private javax.swing.JButton updateTransactionButton;
    private javax.swing.JDialog updateTransactionDialog;
    private javax.swing.JButton updateTransactionInButton;
    private javax.swing.JButton updateTransactionInTransButton;
    private javax.swing.JPanel updateTransactionPanel;
    private javax.swing.JButton viewCustomerButton;
    private javax.swing.JButton viewTransactionButton;
    // End of variables declaration//GEN-END:variables
}
